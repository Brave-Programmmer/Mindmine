---
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
import { collection, doc, getDoc, getDocs } from "firebase/firestore";
import { db } from "../../firebase"; // Ensure this path is correct for your project
import CustomBook from "../../components/CustomBook";

type Book = {
  id: string;
  title: string;
  author: string;
  genre: string;
  synopsis: string;
  email: string;
  coverImage: string;
  totalChapters: number;
  createdAt: any; // Firestore Timestamp
};

type Chapter = {
  id: string;
  title: string;
  content: string;
  createdAt: any; // Firestore Timestamp
};

const { params } = Astro;
const id = params.id as string;

let book: Book | null = null;
let chapters: Chapter[] = [];
let errorMessage: string | null = null; // To store any error messages

// Access the global __app_id provided by the Canvas environment
// This ID is crucial for constructing the correct Firestore path for public data.
// const appId =
//   typeof "1:477285884404:web:2f88ad7334a6f10d4699a1" !== "undefined"
//     ? "1:477285884404:web:2f88ad7334a6f10d4699a1"
//     : "default-app-id";

await (async () => {
  try {
    // Construct the Firestore document reference using the Canvas-specific path
    // Public data is stored under /artifacts/{appId}/public/data/{collectionName}
    const docRef = doc(db, `books`, id);
    const docSnap = await getDoc(docRef);

    if (docSnap.exists()) {
      const bookData = docSnap.data();
      book = { id, ...bookData } as Book;

      // Construct the Firestore collection reference for chapters using the Canvas-specific path
      const chaptersSnapshot = await getDocs(
        collection(db, `books`, id, "chapters")
      );
      chapters = chaptersSnapshot.docs
        .map((doc) => {
          const data = doc.data() as Omit<Chapter, "id">;
          return {
            id: doc.id,
            ...data,
          };
        })
        .sort(
          (a, b) => (a.createdAt?.seconds ?? 0) - (b.createdAt?.seconds ?? 0)
        );
    } else {
      errorMessage = "The requested book does not exist or has been deleted.";
    }
  } catch (err) {
    console.error(
      "Error loading book:",
      err instanceof Error ? err.message : err
    );
    errorMessage = `Failed to load book: ${err instanceof Error ? err.message : String(err)}`;
  }
})();
---

{
  book !== null ? (
    <Layout title={book.title}>
      <CustomBook chapters={chapters} book={book} client:load />
    </Layout>
  ) : (
    <Layout title="Book Not Found">
      <section class="text-center py-20 text-gray-600">
        <h1 class="text-4xl font-bold mb-4">ðŸ“š Book Not Found</h1>
        <p>
          {errorMessage ||
            "The requested book does not exist or has been deleted."}
        </p>
      </section>
    </Layout>
  )
}
